# CloudWatch Alarms Configuration for Peppol SML/SMP Lookup Service
# This configuration defines comprehensive monitoring and alerting for the Lambda function

AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudWatch Alarms and Monitoring for Peppol SML/SMP Lookup Service'

Parameters:
  FunctionName:
    Type: String
    Description: Name of the Lambda function
    Default: peppol-sml-smp-lookup
  
  Environment:
    Type: String
    Description: Environment (dev, test, production)
    AllowedValues: [dev, test, production]
    Default: production
  
  NotificationEmail:
    Type: String
    Description: Email address for alarm notifications
    Default: ops-team@yourcompany.com
  
  SlackWebhookUrl:
    Type: String
    Description: Slack webhook URL for notifications
    NoEcho: true

Resources:
  # SNS Topic for Alarm Notifications
  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${FunctionName}-${Environment}-alarms"
      DisplayName: !Sub "Peppol Lookup Service Alarms - ${Environment}"
      
  # Email Subscription
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref AlarmNotificationTopic
      Endpoint: !Ref NotificationEmail

  # Lambda Function for Slack Notifications
  SlackNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${FunctionName}-${Environment}-slack-notifier"
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt SlackNotificationRole.Arn
      Environment:
        Variables:
          SLACK_WEBHOOK_URL: !Ref SlackWebhookUrl
      Code:
        ZipFile: |
          import json
          import urllib3
          import os
          
          def lambda_handler(event, context):
              webhook_url = os.environ['SLACK_WEBHOOK_URL']
              
              for record in event['Records']:
                  message = json.loads(record['Sns']['Message'])
                  
                  slack_message = {
                      "text": f"ðŸš¨ Peppol Lookup Service Alert",
                      "attachments": [{
                          "color": "danger" if message['NewStateValue'] == 'ALARM' else "good",
                          "fields": [
                              {"title": "Alarm Name", "value": message['AlarmName'], "short": True},
                              {"title": "State", "value": message['NewStateValue'], "short": True},
                              {"title": "Reason", "value": message['NewStateReason'], "short": False},
                              {"title": "Timestamp", "value": message['StateChangeTime'], "short": True}
                          ]
                      }]
                  }
                  
                  http = urllib3.PoolManager()
                  response = http.request('POST', webhook_url, 
                                        body=json.dumps(slack_message),
                                        headers={'Content-Type': 'application/json'})
              
              return {'statusCode': 200}

  # IAM Role for Slack Notification Lambda
  SlackNotificationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Slack Notification Subscription
  SlackSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn: !Ref AlarmNotificationTopic
      Endpoint: !GetAtt SlackNotificationFunction.Arn

  # Permission for SNS to invoke Slack Lambda
  SlackLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SlackNotificationFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref AlarmNotificationTopic

  # Error Rate Alarm (> 5% over 5 minutes)
  ErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${FunctionName}-${Environment}-error-rate-high"
      AlarmDescription: "Error rate exceeds 5% threshold"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref FunctionName
      AlarmActions:
        - !Ref AlarmNotificationTopic
      OKActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching

  # P99 Latency Alarm (> 30 seconds)
  LatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${FunctionName}-${Environment}-latency-high"
      AlarmDescription: "P99 latency exceeds 30 seconds"
      MetricName: Duration
      Namespace: AWS/Lambda
      ExtendedStatistic: p99
      Period: 300
      EvaluationPeriods: 2
      Threshold: 30000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref FunctionName
      AlarmActions:
        - !Ref AlarmNotificationTopic
      OKActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching

  # Certificate Expiry Alarm (30 days)
  CertificateExpiryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${FunctionName}-${Environment}-certificate-expiry"
      AlarmDescription: "Certificates expiring within 30 days detected"
      MetricName: CertificateExpiringWithin30Days
      Namespace: Peppol/Lookup
      Statistic: Maximum
      Period: 3600
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching

  # External Service Availability Alarm
  ExternalServiceAvailabilityAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${FunctionName}-${Environment}-external-service-unavailable"
      AlarmDescription: "External services (SML/SMP/OCSP/CRL) availability below threshold"
      MetricName: ExternalServiceAvailability
      Namespace: Peppol/Lookup
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 95
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: breaching

  # Security Event Alarm
  SecurityEventAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${FunctionName}-${Environment}-security-events"
      AlarmDescription: "Security events detected (malicious inputs, validation failures)"
      MetricName: SecurityEvents
      Namespace: Peppol/Lookup
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching

  # Circuit Breaker Open Alarm
  CircuitBreakerAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${FunctionName}-${Environment}-circuit-breaker-open"
      AlarmDescription: "Circuit breaker is open for external services"
      MetricName: CircuitBreakerOpen
      Namespace: Peppol/Lookup
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching

  # Memory Utilization Alarm
  MemoryUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${FunctionName}-${Environment}-memory-high"
      AlarmDescription: "Memory utilization exceeds 85%"
      MetricName: MemoryUtilization
      Namespace: Peppol/Lookup
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 85
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching

  # Peppol Commons Library Error Alarm
  PeppolCommonsErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${FunctionName}-${Environment}-peppol-commons-errors"
      AlarmDescription: "Errors in peppol-commons library integration"
      MetricName: PeppolCommonsErrors
      Namespace: Peppol/Lookup
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching

Outputs:
  AlarmTopicArn:
    Description: ARN of the SNS topic for alarms
    Value: !Ref AlarmNotificationTopic
    Export:
      Name: !Sub "${AWS::StackName}-alarm-topic"
  
  SlackNotificationFunctionArn:
    Description: ARN of the Slack notification Lambda function
    Value: !GetAtt SlackNotificationFunction.Arn